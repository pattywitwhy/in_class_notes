#########################################
#### Creating a class, idiomatically ####
#########################################

Let's walk through how a class is made, the way we did in prework, to understand the basics. Then, we'll show how the same code would be written idiomatically. A simple example:

class Employee
  def initialize(input_first_name, input_last_name, input_salary, input_active)    # Notice how each parameter is written individually.
    @first_name = input_first_name
    @last_name = input_last_name 
    @salary = input_salary
    @active = input_active
  end

  def first_name           # This is called a reader method, because it allows the user to read the variable by querying the object (Employee.new.first_name)
    @first_name
  end

  def last_name
    @last_name
  end

  def active
    @active
  end

  def active=(new_active_status) # This is called a writer method, because it allows the user to overwrite the variable. = is an acceptable character for a method. Writing it at the end of the variable name allows us to use special, easily readable notation later.
    @active = new_active_status
  end
end

Recall that the initialize method is a special kind of method that automatically executes when you create a new instance of that class.

Once you create an object using this class, you can overwrite its initialze variables using the writer methods. Here's the special notation you can use

# employee.active=(false)
# employee.active = (false)
employee.active = false

Note tha this makes it look like you're defining a variable in standard Ruby. This makes things easy to read.

Because using reader and writer methods is so common, there's a very much abbreviated shorthand that accomplishes the same thing. Check out how many fewer lines this takes:


class Employee
  attr_reader :first_name, :last_name, :active       # defines the reader methods (shortcut: a tab)
  attr_writer :active                                # defines the writer methods (shortcut: w tab)

  def initialize(input_first_name, input_last_name, input_salary, input_active)
    @first_name = input_first_name
    @last_name = input_last_name 
    @salary = input_salary
    @active = input_active
  end

end


How else can we improve this class? By using a hash in the initialzed function for the parameters, rather than listing them individually. Since a hash is 1 argument, this gives you the flexibility to enter some arguments but not others.

class Employee
  attr_reader :first_name, :last_name, :active
  attr_writer :active

  def initialize(input_options)
    @first_name = input_options[:first_name]
    @last_name = input_options[:last_name]
    @salary = input_options[:salary]
    @active = input_options[:active]
  end

end

And, since it's so common to use a hash for inputs, that rather than entering input like this:

employee_1 = Employee.new({first_name: "Nick", last_name: "Cage", salary: 70000, active: true})

You can (and should re: idiomatic) omit the curly braces:

employee_1 = Employee.new(first_name: "Nick", last_name: "Cage", salary: 70000, active: true)

One more convention. When creating an instance of the class, keep each argument on a separate line like this:

employee = Employee.new(
                          first_name: "Nick",
                          last_name: "Cage",
                          salary: 70000,
                          active: true
                          )

Lastly, note that you don't need to give access to read or write everything. You may want to restrict someone from modifying salaries of employees, or from even reading the salaries of other employees.

@<variable name> are instance variables, because they are only exist within a particular instance of a class. So, if you create employee = Employee.new, you can only send read/write to its variable @active within employee. If you try and send a reference to @active generally, your program will error out.