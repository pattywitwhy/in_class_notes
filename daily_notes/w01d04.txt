
Avoid WET code: "Write Everything Twice". The main point of programming is to avoid repetitive tasks, so if you find your self copying and pasting whole sections of code, something has probably gone wrong.

Try to write DRY code: "Don't Repeat Yourself". Today's lesson is helpful for writing DRY code.

#####################
#### Inheritance ####
#####################

Classes can (and should) be organized hierarchically. Classes describe a particular type of thing. Try and think of real world examples (e.g., an item at the grocery store). All grocery items share certain properties: They have a price, a SKU number, a bar code. But once you get into more specific types of items, they no longer share those properties. Canned goods do not share the same properties as produce (e.g., produce has an expiration date, but canned goods do not). So we need distinct classes for produce and canned goods. But both share all of the properties of grocery items, and we don't want to reproduce all of the code for grocery items inside the produce and canned goods classes.

So, we we make those classes _inherit_ the properties of grocery items. These are called subclasses, and grocery items are called the super class. Subclasses share all the properties of superclasses, but the inverse is not true: grocery items do not all have an expiration date. Here's an example:

  class GroceryItem
    include Properties

    attr_reader :price, :weight
    attr_writer :price, :weight
    
    def initialize(input_options)
      @price = input_options[:price]
      @weight = input_options[:weight]
    end
  end

    class Apples < GroceryItem              # **** Here is where the Apples class inherits GroceryItem's properties
    attr_reader :color, :type

    def initialize(input_options)
      @type = input_options[:type]
      @color = input_options[:color]
      super(input_options)                  # We'll cover this soon.
    end
  end

  Apples will _inherit_ reader methods for :price and :weight (properties shared by all grocery items), and create its own reader for type and color. It's DRY because we didn't have to copy all the code from GroceryItem into Apples.